name: Snyk Static Check
description: A reusable composite action to run Snyk IaC, SAST, or SCA scans

inputs:
  snyk-org:
    description: The Snyk organization
    required: true

  snyk-endpoint:
    description: The custom Snyk API endpoint (optional if using default)
    required: false
    default: ""

  snyk-token:
    description: The Snyk API token
    required: true

  severity-threshold:
    description: Minimum severity threshold to report (low, medium, high, critical)
    required: false
    default: "low"

  scan-mode:
    description: Choose which type of scan to run (iac or code)
    required: true

  sast-enabled:
    description: Whether to run Snyk SAST using 'snyk code test'
    required: false
    type: boolean
    default: false

  code-file:
    description: The dependency file to scan (e.g., requirements.txt, poetry.lock)
    required: false
    default: "requirements.txt"

  skip-unresolved:
    description: Add the --skip-unresolved flag (true/false)
    required: false
    default: "false"

  exclude-licenses:
    description: Add the --exclude-licenses flag (true/false)
    required: false
    default: "false"

  json-output-file:
    required: false
    type: string
    description: Snyk JSON file output
    default: snyk.json

  update-pr-with-scan-results:
    required: false
    type: boolean
    description: Update PR with scan results
    default: false

  use-policy-file:
    description: Whether to use a .snyk policy file to ignore known/approved issues
    required: false
    default: "true"

  policy-file-path:
    description: Path to a custom .snyk policy file (relative to the repo root)
    required: false
    default: "."

  install-requirements:
    description: Whether to install Python requirements before scanning
    required: false
    type: boolean
    default: false

  python-package-manager:
    description: Python package manager to use for installing dependencies (pip or poetry)
    required: false
    default: "pip"
    
  generate-pdf-report:
    description: Generate a PDF report using snyk-to-html
    required: false
    type: boolean
    default: false

  continue-on-error:
    description: Whether to continue workflow if Snyk scan fails
    required: false
    type: boolean
    default: false   

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      run: |
        echo "üîç Validating inputs..."

        if [[ "${{ inputs.scan-mode }}" != "iac" && "${{ inputs.scan-mode }}" != "code" ]]; then
          echo "‚ùå Invalid scan-mode '${{ inputs.scan-mode }}'. Must be 'iac' or 'code'."
          exit 1
        fi

        if [[ "${{ inputs.scan-mode }}" == "code" && -z "${{ inputs.code-file }}" && "${{ inputs.sast-enabled }}" != "true" ]]; then
          echo "‚ùå 'code-file' must be provided when scan-mode is 'code' and SAST is not enabled."
          exit 1
        fi

        if [[ "${{ inputs.install-requirements }}" == "true" ]]; then
          if [[ "${{ inputs.python-package-manager }}" != "pip" && "${{ inputs.python-package-manager }}" != "poetry" ]]; then
            echo "‚ùå Invalid python-package-manager '${{ inputs.python-package-manager }}'. Must be 'pip' or 'poetry'."
            exit 1
          fi
        fi

        if [[ "${{ inputs.update-pr-with-scan-results }}" == "true" && -z "${{ inputs.json-output-file }}" ]]; then
          echo "‚ùå 'json-output-file' must be defined when update-pr-with-scan-results is true."
          exit 1
        fi

        echo "‚úÖ All inputs look good."
      shell: bash

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Snyk CLI
      run: npm install -g snyk --quiet
      shell: bash

    - name: Configure Snyk Organization and Endpoint
      run: |
        snyk config set org=${{ inputs.snyk-org }}
        if [[ -n "${{ inputs.snyk-endpoint }}" ]]; then
          snyk config set endpoint=${{ inputs.snyk-endpoint }}
        fi
      shell: bash

    - name: Authenticate Snyk
      run: |
        snyk auth "${{ inputs.snyk-token }}"
      shell: bash

    - name: Run Snyk IaC Scan
      if: ${{ inputs.scan-mode == 'iac' }}
      run: snyk iac test --severity-threshold=${{ inputs.severity-threshold }} --report --json-file-output=${{ inputs.json-output-file }}
      shell: bash
      continue-on-error: ${{ inputs.continue-on-error }}

    - name: Install Python requirements
      if: ${{ inputs.install-requirements == 'true' && inputs.scan-mode == 'code' && inputs.sast-enabled != 'true' }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        if [[ "${{ inputs.python-package-manager }}" == "poetry" ]]; then
          pip install poetry
          poetry install --no-root
        else
          pip install -r ${{ inputs.code-file }}
        fi

    - name: Run Snyk Code Dependency Scan (SCA)
      if: ${{ inputs.scan-mode == 'code' && inputs.sast-enabled != 'true' }}
      run: |
        CMD="snyk test --file=${{ inputs.code-file }} --severity-threshold=${{ inputs.severity-threshold }}"

        if [[ "${{ inputs.skip-unresolved }}" == "true" ]]; then
          CMD="$CMD --skip-unresolved"
        fi

        if [[ "${{ inputs.exclude-licenses }}" == "true" ]]; then
          CMD="$CMD --exclude-licenses"
        fi

        if [[ "${{ inputs.use-policy-file }}" == "true" ]]; then
          CMD="$CMD --policy-path=${{ inputs.policy-file-path }}"
        fi

        CMD="$CMD --json-file-output=${{ inputs.json-output-file }}"

        echo "Running: $CMD"
        eval "$CMD"
      shell: bash
      continue-on-error: ${{ inputs.continue-on-error }}

    - name: Run Snyk Code SAST Scan
      if: ${{ inputs.scan-mode == 'code' && inputs.sast-enabled == 'true' }}
      run: |
        echo "‚öôÔ∏è Running Snyk Code SAST scan..."
        snyk code test --severity-threshold=${{ inputs.severity-threshold }} --json-file-output=${{ inputs.json-output-file }}
      shell: bash
      continue-on-error: ${{ inputs.continue-on-error }}

    # ‚úÖ PR comment and PDF generation steps remain the same
    # ... (unchanged steps: Post results to PR, Generate PDF report, Upload PDF)

